{"name":"Php Trello API","tagline":"A simple Object Oriented wrapper for the Trello API, written in PHP5.","body":"#### Features\r\n\r\n* Follows PSR-0 conventions and coding standards: autoload friendly\r\n* Light and fast thanks to lazy loading of API classes\r\n* Extensively tested\r\n* Uses [Trello API v1](https://trello.com/docs/index.html). The object API is very similar to the RESTful API.\r\n\r\n#### Installation\r\n\r\nThe recommended way is using [composer](http://getcomposer.org):\r\n\r\n```bash\r\n$ composer require cdaguerre/php-trello-api:@dev\r\n```\r\nHowever, `php-trello-api` follows the PSR-0 naming conventions, which means you can easily integrate `php-trello-api` class loading in your own autoloader.\r\n\r\n***\r\n\r\n#### Basic usage\r\n\r\n```php\r\nuse Trello\\Client;\r\n\r\n$client = new Client();\r\n$client->authenticate('api_key', 'token', Client::AUTH_URL_CLIENT_ID);\r\n\r\n$boards = $client->api('member')->boards()->all();\r\n```\r\n\r\nThe `$client` object gives you access to the entire Trello API.\r\n\r\n***\r\n\r\n#### Advanced usage with the Trello manager\r\n\r\nThis package includes a simple model layer above the API with a nice chainable API allowing following manipulation of Trello objects:\r\n\r\n```php\r\nuse Trello\\Client;\r\nuse Trello\\Manager;\r\n\r\n$client = new Client();\r\n$client->authenticate('api_key', 'token', Client::AUTH_URL_CLIENT_ID);\r\n\r\n$manager = new Manager($client);\r\n\r\n$card = $manager->getCard('547440ad3f8b882bc11f0497');\r\n\r\n$card\r\n    ->setName('Test card')\r\n    ->setDescription('Test description')\r\n    ->save();\r\n```\r\n\r\n***\r\n\r\n#### Dispatching Trello events to your app\r\n\r\nThe service uses the [Symfony EventDispatcher](https://github.com/symfony/EventDispatcher) component to dispatch events occuring on incoming webhooks.\r\n\r\nTake a look at the [Events](https://github.com/cdaguerre/php-trello-api/blob/master/lib/Trello/Events.php) class constants for names and associated event classes.\r\n\r\n```php\r\nuse Trello\\Client;\r\nuse Trello\\Service;\r\nuse Trello\\Events;\r\n\r\n$client = new Client();\r\n$client->authenticate('api_key', 'token', Client::AUTH_URL_CLIENT_ID);\r\n\r\n$service = new Service($client);\r\n\r\n// Bind a callable to a given event...\r\n$service->addListener(Events::BOARD_UPDATE, function ($event) {\r\n    $board = $event->getBoard();\r\n\r\n    // do something\r\n});\r\n\r\n// Check if the current request was made by a Trello webhook\r\n// This will dispatch any Trello event to listeners defined above\r\n$service->handleWebhook();\r\n```\r\n\r\n***\r\n\r\n#### Documentation\r\n* Package [API](docs/Api/Index.md)\r\n* Official [API documentation](https://trello.com/docs/index.html).","google":"UA-57680198-1","note":"Don't delete this file! It's used internally to help with page regeneration."}