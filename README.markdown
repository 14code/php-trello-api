PHP Trello API v1 client
========================

[![Build Status](https://travis-ci.org/cdaguerre/php-trello-api.svg?branch=master)](https://travis-ci.org/cdaguerre/php-trello-api)

A simple Object Oriented wrapper for the Trello API, written in PHP5.

Uses [Trello API v1](https://trello.com/docs/index.html). The object API is very similar to the RESTful API.

## Features

* Follows PSR-0 conventions and coding standards: autoload friendly
* Light and fast thanks to lazy loading of API classes
* Extensively tested

## Requirements

* PHP >= 5.3.2 with [cURL](http://php.net/manual/en/book.curl.php) extension,
* [Guzzle](https://github.com/guzzle/guzzle) library,
* (optional) [PHPUnit](https://phpunit.de) to run tests.

## Autoload

The first step to use `php-trello-api` is to download composer:

```bash
$ curl -s http://getcomposer.org/installer | php
```

Then we have to install our dependencies using:
```bash
$ php composer.phar install
```
Now we can use autoloader from Composer by:

```json
{
    "require": {
        "cdaguerre/php-trello-api": "@dev"
    }
}
```

> `php-trello-api` follows the PSR-0 convention names for its classes, which means you can easily integrate `php-trello-api` classes loading in your own autoloader.

## Basic usage

```php
<?php

// This file is generated by Composer
require_once 'vendor/autoload.php';

$client = new \Trello\Client();

$client->authenticate('api_key', 'token', Client::AUTH_URL_CLIENT_ID);

$boards = $client->api('member')->boards()->all();
```

The `$client` object gives you access to the entire Trello API.

## Model layer usage

This package includes a simple Model layer above the API with a nice chainable API allowing following manipulation of Trello objects:

```php
$service = new \Trello\Service($client);

$card = $service->getCard('547440ad3f8b882bc11f0497');

$card
    ->setName('Test card')
    ->setDescription('Test description')
    ->save();
```

## Dispatching Trello events to your app

The service uses the [Symfony EventDispatcher](https://github.com/symfony/EventDispatcher) component to dispatch events occuring on incoming webhooks.

Take a look at the [Events](https://github.com/cdaguerre/php-trello-api/blob/master/lib/Trello/Events.php) class constants for names and associated event classes.

```php
use \Trello\Events;
use \Symfony\Component\EventDispatcher\EventSubscriberInterface;

// Bind a callable to a given event...
$service->addListener(Events::BOARD_UPDATE, function ($event) {
    $board = $event->getBoard();

    // do something
});

// ...or add an EventSubscriber
$service->addSubscriber(EventSubscriberInterface $subscriber);
```

## Documentation

Yet to be written, but you can take a look at the `phpdoc` blocks and the official [API documentation](https://trello.com/docs/index.html).

## Contributing

Feel free to make any comments, file issues or make pull requests.

## License

`php-trello-api` is licensed under the MIT License - see the LICENSE file for details

## Credits

- Largely inspired by the excellent [php-trello-api](https://raw.githubusercontent.com/KnpLabs/php-github-api) developed by the guys at [KnpLabs](http://knplabs.fr)
- Thanks to Trello for the API and documentation.
